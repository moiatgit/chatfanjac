NOW: check client

- create a highly simplified version of the code with just the comments
  then another without the logging messages nor the error control
  then another without the logging messages

- consider designing a drawing depicting the whole stuff

- consider for simplification the example found at https://docs.python.org/3/library/socket.html#socket-timeouts

    # Echo server program
    import socket

    HOST = ''                 # Symbolic name meaning all available interfaces
    PORT = 50007              # Arbitrary non-privileged port
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST, PORT))
        s.listen(1)
        conn, addr = s.accept()
        with conn:
            print('Connected by', addr)
            while True:
                data = conn.recv(1024)
                if not data: break
                conn.sendall(data)

    # Echo client program
    import socket

    HOST = 'daring.cwi.nl'    # The remote host
    PORT = 50007              # The same port as used by the server
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((HOST, PORT))
        s.sendall(b'Hello, world')
        data = s.recv(1024)
    print('Received', repr(data))



Further exercises ideas:

- el primer participant hauria de rebre un missatge dient quelcom similar a "de
  moment estàs tu només"

- yes wanna

- server accepts commands to send a message to a concrete participant or even
  finishing they (e.g. because of missbehavior)

- demanar un password per poder entrar

- no permetre noms duplicats dels participants
  - ex. rebatejar el participant amb el nom seguit d'un nr incremental.

Antiga descripció del servidor
    La implementació consisteix en quatre tipus de fils d'execució:

    - el fil principal
      - obté les dades de configuració del servei (ip i port)
      - llença el fil d'enviament de missatges
      - llença el fil de gestió de peticions
      - rep i processa comandes de consola
      - crea la qua de missatges que permet comunicar els altres fils amb el fil d'enviament de missatges
      - crea i marca l'esdeveniment (threading.Event) de finalització per que la resta de fils
        finalitzin la seva execució

    - el fil de gestió de peticions (executa la funció gestiona_peticions())
      - crea el socket de servidor
      - en cas que hi hagi problemes per crear el socket, marca l'esdeveniment de finalització
      - escolta el socket de servidor per noves peticions de clients per afegir-se al xat
      - en cas que hi hagi problemes per escoltar del socket, marca l'esdeveniment de finalització
      - llença un nou fil de gestió de participant per cada nou client
      - finalitza quan l'esdeveniment de finalització és marcat
      - tanca el socket de servidor

    - el fil de gestió de participant (executa la funció gestiona_participant())
      - escolta el socket d'un participant per obtenir el nom
      - en cas que tingui problemes per rebre el nom del participant. finalitza execució del fil
      - informa al nou participant que ha estat admés al xat
      - presenta el nou participant a la resta de participants actius del xat
      - afegeix el nou participant (amb el seu socket i nom) a la llista de participants actius al xat
      - escolta el socket del participant per nous missatges del participant
      - per cada missatge del participant, reenvia el missatge a la resta
      - quan rep el missatge de finalització per part del participant,
        - elimina el participant de la llista de participants actius
        - notifica la resta de participants que aquest ha abandonat el xat
        - tanca la connexio del participant
        - finalitza l'execució del fil
      - quan l'esdeveniment de finalització és marcat,
        - notifica el participant que el xat es tanca
        - tanca la connexio del participant
        - finalitza l'execució del fil
      - si en algun moment perd la connexió amb el participant,
        - notifica la resta de participants que aquest ha perdut la connexió
        - tanca la connexio del participant
        - finalitza l'execució del fil
      - en finalitzar l'execució del fil, tanca el socket

    - el fil d'enviament de missatges (executa la funcio envia_missatges())
      - processa la cua de missatges: és l'únic fil que en treu elements
      - finalitza quan la marca de finalització ha estat establerta i la cua de missatges buida
      - els elements de la cua de missatges inclouen la informació del destinatari i el missatge
      - envia missatges només als participants que encara hi són actius
      - si un enviament falla considera perduda la connexió amb el participant i tanca la connexió.
        El tancament de la connexió provocarà la finalització del fil de gestió del participant.

